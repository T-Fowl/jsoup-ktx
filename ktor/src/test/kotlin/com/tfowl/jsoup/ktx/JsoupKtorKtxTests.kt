/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.tfowl.jsoup.ktx

import io.ktor.client.request.forms.*
import io.ktor.http.*
import io.ktor.http.content.*
import org.jsoup.helper.HttpConnection
import org.junit.Test
import java.io.ByteArrayInputStream
import java.io.InputStream
import kotlin.test.assertEquals
import kotlin.test.assertNotNull
import kotlin.test.assertTrue

class JsoupKtorKtxTests {

    @Test
    fun parametersBuilderAppendConnectionKeyValue() {
        val kv = HttpConnection.KeyVal.create("KEY", "VALUE")
        val parameters = Parameters.build { append(kv) }

        assertTrue(parameters.contains("KEY"))
        assertTrue(parameters.contains("KEY", "VALUE"))
        assertEquals(setOf("KEY"), parameters.names())
    }

    @Test
    fun parametersBuilderAppendAllConnectionKeyValue() {
        val kvs = listOf(
            HttpConnection.KeyVal.create("A", "B"),
            HttpConnection.KeyVal.create("C", "D")
        )
        val parameters = Parameters.build { appendAll(kvs) }

        assertTrue(parameters.contains("A"))
        assertTrue(parameters.contains("A", "B"))
        assertTrue(parameters.contains("C"))
        assertTrue(parameters.contains("C", "D"))
        assertEquals(setOf("A", "C"), parameters.names())
    }

    @Test
    fun connectionKeyValueListToParameters() {
        val kvs = listOf(
            HttpConnection.KeyVal.create("A", "B"),
            HttpConnection.KeyVal.create("C", "D")
        )
        val parameters = kvs.toParameters()

        assertTrue(parameters.contains("A"))
        assertTrue(parameters.contains("A", "B"))
        assertTrue(parameters.contains("C"))
        assertTrue(parameters.contains("C", "D"))
        assertEquals(setOf("A", "C"), parameters.names())
    }

    @Test
    fun inputStreamToInputProvider() {
        val stream: InputStream = ByteArrayInputStream("deadbeef".encodeToByteArray())
        val inputProvider = stream.toInputProvider()

        assertEquals("deadbeef", inputProvider.block().readText())
    }

    @Test
    fun connectionKeyValToFormPart() {
        val kvBasic = HttpConnection.KeyVal.create("A", "B")
        val partBasic = kvBasic.toFormPart()
        assertEquals("A", partBasic.key)
        assertTrue(partBasic.value is String)
        assertEquals("B", partBasic.value)
        assertTrue(partBasic.headers.isEmpty())

        val kvFile = HttpConnection.KeyVal.create("A", "foo.txt", ByteArrayInputStream("deadbeef".encodeToByteArray()))
        val partFile = kvFile.toFormPart()
        assertEquals("A", partFile.key)
        assertTrue(partFile.value is InputProvider)
        assertEquals("deadbeef", (partFile.value as InputProvider).block().readText())
        assertTrue(partFile.headers.contains(HttpHeaders.ContentDisposition))
        assertTrue("filename=\"foo.txt\"" in partFile.headers[HttpHeaders.ContentDisposition]!!)
    }

    @Test
    fun formBuilderAppendConnectionKeyValue() {
        val kv = HttpConnection.KeyVal.create("KEY", "VALUE")
        val form = formData { append(kv) }

        val part = assertNotNull(form.find { it.name == "KEY" })
        assertTrue(part is PartData.FormItem)

        assertEquals("VALUE" , part.value)
        
    }

//    @Test
//    fun parametersBuilderAppendAllConnectionKeyValue() {
//        val kvs = listOf(
//            HttpConnection.KeyVal.create("A", "B"),
//            HttpConnection.KeyVal.create("C", "D")
//        )
//        val parameters = Parameters.build { appendAll(kvs) }
//
//        assertTrue(parameters.contains("A"))
//        assertTrue(parameters.contains("A", "B"))
//        assertTrue(parameters.contains("C"))
//        assertTrue(parameters.contains("C", "D"))
//        assertEquals(setOf("A", "C"), parameters.names())
//    }
//
//    @Test
//    fun connectionKeyValueListToParameters() {
//        val kvs = listOf(
//            HttpConnection.KeyVal.create("A", "B"),
//            HttpConnection.KeyVal.create("C", "D")
//        )
//        val parameters = kvs.toParameters()
//
//        assertTrue(parameters.contains("A"))
//        assertTrue(parameters.contains("A", "B"))
//        assertTrue(parameters.contains("C"))
//        assertTrue(parameters.contains("C", "D"))
//        assertEquals(setOf("A", "C"), parameters.names())
//    }
}
